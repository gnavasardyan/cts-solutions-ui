import { db } from './db';
import { users } from '@shared/schema';
import bcrypt from 'bcryptjs';
import { nanoid } from 'nanoid';

const roleUsers = [
  {
    email: 'customer@example.com',
    password: 'operator123',
    role: 'customer_operator',
    name: '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä',
    isActive: true
  },
  {
    email: 'factory@example.com',
    password: 'operator123',
    role: 'factory_operator', 
    name: '–ó–∞–≤–æ–¥—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä',
    isActive: true
  },
  {
    email: 'warehouse@example.com',
    password: 'operator123',
    role: 'warehouse_keeper',
    name: '–°–∫–ª–∞–¥—Å–∫–æ–π —Ä–∞–±–æ—Ç–Ω–∏–∫', 
    isActive: true
  },
  {
    email: 'site@example.com',
    password: 'operator123',
    role: 'site_master',
    name: '–ú–∞—Å—Ç–µ—Ä —É—á–∞—Å—Ç–∫–∞',
    isActive: true
  },
  {
    email: 'auditor@example.com',
    password: 'operator123',
    role: 'auditor',
    name: '–ê—É–¥–∏—Ç–æ—Ä',
    isActive: true
  },
  {
    email: 'admin@example.com',
    password: 'admin123',
    role: 'administrator',
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    isActive: true
  }
];

export async function initializeRoleUsers() {
  console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π...');
  
  try {
    for (const userData of roleUsers) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await db.select().from(users).where(eq(users.email, userData.email)).get();
      
      if (!existingUser) {
        const hashedPassword = await bcrypt.hash(userData.password, 12);
        const now = Math.floor(Date.now() / 1000);
        
        await db.insert(users).values({
          id: nanoid(),
          email: userData.email,
          password: hashedPassword,
          firstName: userData.name,
          role: userData.role as any,
          isActive: userData.isActive ? 'true' : 'false',
          createdAt: now,
          updatedAt: now
        });
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name} (${userData.email}) - —Ä–æ–ª—å: ${userData.role}`);
      } else {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${userData.name} (${userData.email})`);
      }
    }
    
    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: customer@example.com / operator123');
    console.log('–ó–∞–≤–æ–¥—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: factory@example.com / operator123');
    console.log('–°–∫–ª–∞–¥—Å–∫–æ–π —Ä–∞–±–æ—Ç–Ω–∏–∫: warehouse@example.com / operator123');
    console.log('–ú–∞—Å—Ç–µ—Ä —É—á–∞—Å—Ç–∫–∞: site@example.com / operator123');
    console.log('–ê—É–¥–∏—Ç–æ—Ä: auditor@example.com / operator123');
    console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@example.com / admin123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    throw error;
  }
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º eq –∏–∑ drizzle-orm
import { eq } from 'drizzle-orm';

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initializeRoleUsers().catch(console.error);